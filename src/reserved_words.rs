type ReservedText = &'static str;

#[allow(dead_code)]
pub struct ReservedWord {
    pub let_block: ReservedText,
    pub let_math: ReservedText,
    pub let_mutable: ReservedText,
    pub type_stmt: ReservedText,
    pub let_inline: ReservedText,
    pub constraint: ReservedText,
    pub inline_command: ReservedText,
    pub block_command: ReservedText,
    pub math_command: ReservedText,
    pub let_rec: ReservedText,
    pub controls: ReservedText,
    pub command: ReservedText,
    pub before: ReservedText,
    pub module: ReservedText,
    pub direct: ReservedText,
    pub struct_stmt: ReservedText,
    pub cycle: ReservedText,
    pub match_stmt: ReservedText,
    pub while_stmt: ReservedText,
    pub if_stmt: ReservedText,
    pub else_stmt: ReservedText,
    pub true_stmt: ReservedText,
    pub false_stmt: ReservedText,
    pub open: ReservedText,
    pub then: ReservedText,
    pub when: ReservedText,
    pub with: ReservedText,
    pub and: ReservedText,
    pub end: ReservedText,
    pub fun: ReservedText,
    pub let_stmt: ReservedText,
    pub mod_stmt: ReservedText,
    pub not: ReservedText,
    pub sig: ReservedText,
    pub val: ReservedText,
    pub as_stmt: ReservedText,
    pub do_stmt: ReservedText,
    pub in_stmt: ReservedText,
    pub of: ReservedText,
}

#[allow(unused_variables, dead_code)]
pub const RESERVED_WORD: ReservedWord = ReservedWord {
    constraint: "constraint",
    inline_command: "inline-cmd",
    block_command: "block-cmd",
    math_command: "math-cmd",
    let_mutable: "let-mutable",
    let_inline: "let-inline",
    let_block: "let-block",
    let_math: "let-math",
    type_stmt: "type",
    let_rec: "let-rec",
    controls: "controls",
    command: "command",
    before: "before",
    module: "module",
    direct: "direct",
    struct_stmt: "struct",
    cycle: "cycle",
    match_stmt: "match",
    while_stmt: "while",
    if_stmt: "if",
    else_stmt: "else",
    true_stmt: "true",
    false_stmt: "false",
    open: "open",
    then: "then",
    when: "when",
    with: "with",
    and: "and",
    end: "end",
    fun: "fun",
    let_stmt: "let",
    mod_stmt: "mod",
    not: "not",
    sig: "sig",
    val: "val",
    as_stmt: "as",
    do_stmt: "do",
    in_stmt: "in",
    of: "of",
};
