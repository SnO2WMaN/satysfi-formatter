@require: stdjabook
@require: mdja
@require: code-printer/code-printer
@require: code-printer/code-syntax
@require: code-printer/code-theme
@require: code-printer/code-design

% 改ページ
let-block ctx +newpage = clear-page
% シェルコマンド
let-block +cmd arg = '<
    +code-printer ?:(
  CodePrinter.make-config CodeSyntax.shell CodeTheme.basic-dark
  |> CodePrinter.set-basic-font-size 9pt
  |> CodePrinter.set-number-fun CodeDesign.number-fun-null
) (arg);
>
% インラインシェルコマンド
let-inline \cmd arg =
    {\code-printer ?:(
  CodePrinter.make-config CodeSyntax.shell CodeTheme.basic-dark
  |> CodePrinter.set-basic-font-size 9pt
  |> CodePrinter.set-number-fun CodeDesign.number-fun-null
) (arg);
}
% インラインRustコマンド
let-inline \cmd-rust arg =
    {\code-printer ?:(
  CodePrinter.make-config CodeSyntax.rust CodeTheme.basic-dark
  |> CodePrinter.set-basic-font-size 9pt
  |> CodePrinter.set-number-fun CodeDesign.number-fun-null
) (arg);
}
% インラインシェルコマンド
let-inline \cmd-saty arg =
    {\code-printer ?:(
  CodePrinter.make-config CodeSyntax.satysfi CodeTheme.basic-dark
  |> CodePrinter.set-basic-font-size 9pt
  |> CodePrinter.set-number-fun CodeDesign.number-fun-null
) (arg);
}
in

document(|
    title = {\SATySFi;-formatter};
    author = {usagrada};
    show-toc = true;
    show-title = true;
|)'<
    +newpage;
    +p {
        \SATySFi;を使うに当たって、formatter が無いのが不便だったので、format をするためのツールを作りました。\footnote { このドキュメントは format のテストも兼ねて書いています。 }\footnote {
            \SATySFi;の文法に習熟している訳ではないため、parserを元に復元するという手法によりフォーマットを実現おり、容易にビルドが失敗するようになります。(22/3/11 現在)
        }
    }
    +section { formatter の install 方法 } <
        +p {
            以下のどちらかの方法で、入れることができます。
            ターミナルに以下のコマンドを打ち込んでください。\footnote {
                --force は無くても入りますが、既にインストールしている場合、
                最新のデータにアップデートするために同じコマンドを使用できます。
            }
        }
        +cmd (`cargo install --force --git https://github.com/usagrada/satysfi-formatter.git`);
        +cmd (`git clone https://github.com/usagrada/satysfi-formatter.git
cd satysfi-formatter
cargo install --path .
`);
    >
    +section { formatter の使い方 } <
        +cmd (`satysfi-fmt $input -o $output`);
        +p {
            `output`を指定しなかった場合、コマンドラインの標準出力に結果が表示されます。
        }
    >
    +section { 開発者の方 } <
        +p {
            `release build`でない場合、`src/visualize.rs`にある関数が呼び出されるようになっており、ファイルの構造を確認できるようになってます。\cmd (`cargo run -- $input`);
            `lib.rs`の`format`を開始地点とし、
            コードから`satysfi-parser`で CST 化し、文字列に戻して結合しています。
            % comment
            現状では、かなり愚直な実装をしている`+`一部のみしか対応していない(コメントが消去される、改行入れて欲しいのに消える etc.)ため、 修正等があれば、 Pull Request や Issue にお願いいたします。
            % comment
            Issue でいただく場合、期待するフォーマットのテストをいただけるとスムーズに対応ができると思います。
            その際、実際にそれがコンパイル可能である必要はありません。
        }
        +subsection { Pull Request } <
            +p {
                実装した部分のテストケースを書いていただいてから、プルリクエストをいただけると幸いです。
                その際、`src/tests`以下でしたら何処に書いていただいても構いません。\footnote { そもそもまだ全部のテストケースが通らない…… }
            }
        >
        +subsection { issue } <
            +p {
                以下にサンプル（`src/tests/common.rs` `test1`と同じ）を載せておきます。`r#""`の内部に書かれたテキストはスペースや改行を含め全てそのまま出力されるため、
                スペース数改行数等の違いにより、テストが容易に落ちます。\cmd-rust (`#[test]
fn test1() {
    // format 前のテキスト
    let text = r#"@import: hello
  @require: local
  
document(|title = {hello}|)'<+p{hello world}>"#;

    // 期待されるテキスト
    let expect = r#"@import: hello
@require: local

document(|title = {hello}|)'<
    +p { hello world }
>
"#;
    test_tmpl(text, expect);
}
`);
            }
        >
    >
    +section { document の更新 } <
        +p {
            `draft.saty`を更新して、以下のコマンドを叩くと`doc.pdf`を更新します。\cmd (`cargo make build-doc`);
            その際、`cargo-make`というパッケージが必要なので、インストールしていない方は以下のコマンドでインストールしてください。\cmd (`cargo install --force cargo-make`);
        }
    >
    +section { format } <
        +p {
            基本の indent は 4 です。(そのうち引数で管理ができるようにします)
        }
    >
>
